---
- name: "Manage TSI switch NX-OS versions and baseline configs"
  hosts: "tsi_switches"
  tasks:
    - name: "Define filepath"
      set_fact:
        filepath: "files/tsi_switches"
      delegate_to: "localhost"

    - name: "Begin NX-OS update process"
      block:
        - name: "Copy desired NX-OS image to device: {{ desired_nxos_file }}"
          cisco.nxos.nxos_file_copy:
            local_file: "{{ filepath }}/{{ desired_nxos_file }}"
            remote_file: "{{ desired_nxos_file }}"
          register: "copy_result"

        - name: "Update NX-OS because image file changed"
          block:
            - name: "Copy file and perform installation"
              cisco.nxos.nxos_install_os:
                system_image_file: "{{ desired_nxos_file }}"

            - name: "Wait for device to come online"
              wait_for:
                host: "{{ ansible_host }}"
                port: "{{ ansible_port }}"
                state: "started"
                timeout: 600
                delay: 2  # use 60 for prod
              delegate_to: "localhost"

            - name: "Collect current NX-OS version"
              nxos_command:
                commands: "show version | json"
              register: "ver_output"

            - name: "Ensure software update succeeded"
              vars:
                cur_ver: "{{ ver_output.stdout[0].nxos_file_name }}"
              assert:
                that: "desired_nxos_file in cur_ver"
                msg: "Expected NX-OS {{ desired_nxos_file }}; saw {{ cur_ver }}"
              delegate_to: "localhost"
          when: "copy_result.changed"
          # block end

      when: "desired_nxos_file is defined and desired_nxos_file"
      # block end

    - name: "Begin baseline config replacement process"
      block:
        - name: "Copy desired config to device: {{ desired_config }}"
          cisco.nxos.nxos_file_copy:
            local_file: "{{ filepath }}/{{ desired_config }}"
            remote_file: "{{ desired_config }}"
          register: "copy_result"

        - name: "Replace configuration because baseline changed"
          block:
            - name: "Replace the existing config with the new one"
              cisco.nxos.nxos_config:
                backup: true
                replace: "config"
                replace_src: "bootflash:{{ desired_config }}"

            - name: "Collect config replacement status"
              cisco.nxos.nxos_command:
                commands: "show config-replace status | json"
              register: "config_status"

            - name: "Ensure config replacement succeeded"
              vars:
                status: "{{ config_status.stdout[0].operation_status }}"
              assert:
                that: "status == 'Success'"
                msg: "Expected config replacement 'Success', saw {{ status }}"
              delegate_to: "localhost"
          when: "copy_result.changed"
          # block end

      when: "desired_config is defined and desired_config"
      # block end
