---
- name: "Perform common file download setup tasks"
  block:
    - name: "Define desired file FQFN and repo base URL"
      set_fact:
        fqfn: "{{ repo_filepath }}/{{ desired_file }}"
        base_url: "{{ repo_internal_url }}/service/rest/v1"

    - name: "Display desired file FQFN and repo base URL"
      debug:
        msg:
          - "fqfn: {{ fqfn }}"
          - "base_url: {{ base_url }}"

    - name: "Ensure repo is responding to API requests"
      uri:
        url: "{{ base_url }}/status"
        user: "{{ repo_username }}"
        password: "{{ repo_password }}"
        force_basic_auth: true

    - name: "Search for {{ fqfn }} in repo {{ repo_name }}"
      vars:
        params: "repository={{ repo_name }}&name={{ fqfn | urlencode }}"
      uri:
        url: "{{ base_url }}/search/assets?{{ params }}"
        user: "{{ repo_username }}"
        password: "{{ repo_password }}"
        force_basic_auth: true
        headers:
          Accept: "application/json"
      register: "repo_search"

    - name: "Ensure that the correct file was found"
      assert:
        that:
          - "repo_search.json['items'] | length == 1"
          - "repo_search.json['items'][0].path == fqfn"
        msg: "{{ fqfn }} not found: {{ repo_search.json }}"
  delegate_to: "localhost"

- name: "Compute SHA-256 for local NX-OS file if present"
  nxos_command:
    commands: "show file bootflash:{{ desired_file }} sha256sum"
  register: "nxos_hash_raw"

- name: "Finish common file download setup tasks"
  block:
    - name: "Extract SHA-256 hashes"
      set_fact:
        nxos_hash: "{{ nxos_hash_raw.stdout[0] | trim | lower }}"
        repo_hash: "{{ repo_search.json['items'][0].checksum.sha256 | lower }}"

    - name: "Display SHA-256 hashes"
      debug:
        msg:
          - "nxos_hash: {{ nxos_hash }}"
          - "repo_hash: {{ repo_hash }}"

    - name: "Do the SHA-256 hashes match? {{ hashes_match_temp }}"
      vars:
        hashes_match_temp: "{{ nxos_hash == repo_hash }}"
      set_fact:
        hashes_match: "{{ hashes_match_temp }}"
  delegate_to: "localhost"

- name: "Perform common actions when hashes do not match or forced"
  block:
    - name: "Temporarily enable bash-shell"
      nxos_feature:
        feature: "bash-shell"
        state: "enabled"

    # Example Bash "curl" command:
    # run bash curl http://192.168.99.86:8081/repository/
    #   network-data/files/tsi_switches/n3k_baseline.txt
    #   -u 'jdoe:password321' -k -f -o /bootflash/test.cfg
    #   && echo COPY_COMPLETE
    - name: "Download {{ desired_file }} when hashes do not match"
      nxos_command:
        commands:
          - "delete bootflash:{{ desired_file }} no-prompt"
          - >-
            run bash curl {{ repo_external_url }}/repository/{{ repo_name
            }}/{{ fqfn }} -u '{{ repo_username }}:{{ repo_password }}'
            -k -f -o /bootflash/{{ desired_file }} && echo COPY_COMPLETE
          - "show file bootflash:{{ desired_file }} sha256sum"
      register: "copy_result"

    - name: "Disable bash-shell"
      nxos_feature:
        feature: "bash-shell"
        state: "disabled"

    - name: "Ensure file copy succeeded"
      vars:
        nxos_hash2: "{{ copy_result.stdout[2] | trim | lower }}"
      assert:
        that:
          - "'COPY_COMPLETE' in copy_result.stdout[1]"
          - "nxos_hash2 == repo_hash"
        msg: "Error: {{ copy_result }} / {{ nxos_hash2 }} / {{ repo_hash }}"
      delegate_to: "localhost"
  when: "not hashes_match or force_change"
...
